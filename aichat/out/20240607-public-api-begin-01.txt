Here is a draft SQL script to create a public API for your workflow system:

```sql
-- Create the public schema
CREATE SCHEMA IF NOT EXISTS wf_public;

-- Create a view for stack_wf_process in the public schema
CREATE OR REPLACE VIEW wf_public.v1_process AS
SELECT 
    stack_wf_process_uu AS process_id,
    search_key,
    name,
    description
FROM wf_private.stack_wf_process;

-- Create a view for stack_wf_request in the public schema
CREATE OR REPLACE VIEW wf_public.v1_request AS 
SELECT
    r.stack_wf_request_uu AS request_id,
    r.search_key,
    r.date_requested,
    u.search_key AS requester_id,
    s.search_key AS state,
    res.search_key AS resolution
FROM wf_private.stack_wf_request r
JOIN wf_private.stack_user u ON r.stack_user_uu = u.stack_user_uu  
JOIN wf_private.stack_wf_state s ON r.stack_wf_state_uu = s.stack_wf_state_uu
JOIN wf_private.stack_wf_resolution res ON r.stack_wf_resolution_uu = res.stack_wf_resolution_uu;

-- Create a function to get request activity history
CREATE OR REPLACE FUNCTION wf_public.v1_get_request_activity_history(
    p_request_id uuid,
    p_only_unprocessed boolean default false
)
RETURNS TABLE (
    activity text,
    is_processed boolean,
    description text    
) 
AS $$
BEGIN
    RETURN QUERY
    SELECT a.name AS activity, h.is_processed, h.description  
    FROM wf_private.stack_wf_request_activity_history h
    JOIN wf_private.stack_wf_activity a ON h.stack_wf_activity_uu = a.stack_wf_activity_uu
    WHERE h.stack_wf_request_uu = p_request_id
      AND CASE WHEN p_only_unprocessed THEN NOT p_only_unprocessed ELSE h.is_processed END = h.is_processed;
END;
$$ LANGUAGE plpgsql;

-- Create a function to get available request actions
CREATE OR REPLACE FUNCTION wf_public.v1_get_request_actions(p_request_id uuid)
RETURNS TABLE (action text, resolution text)
AS $$
BEGIN
    RETURN QUERY
    SELECT act.name AS action, COALESCE(act_tr_res.name, tr_res.name) AS resolution
    FROM wf_private.stack_wf_request r
    JOIN wf_private.stack_wf_transition tr ON r.stack_wf_state_uu = tr.stack_wf_state_current_uu  
    JOIN wf_private.stack_wf_action_transition_lnk atr ON tr.stack_wf_transition_uu = atr.stack_wf_transition_uu
    JOIN wf_private.stack_wf_action act ON atr.stack_wf_action_uu = act.stack_wf_action_uu
    LEFT JOIN wf_private.stack_wf_resolution act_tr_res ON atr.stack_wf_resolution_uu = act_tr_res.stack_wf_resolution_uu  
    LEFT JOIN wf_private.stack_wf_resolution tr_res ON tr.stack_wf_resolution_uu = tr_res.stack_wf_resolution_uu
    WHERE r.stack_wf_request_uu = p_request_id;  
END;
$$ LANGUAGE plpgsql;

-- Grant SELECT on the public views to the api_user role
GRANT SELECT ON wf_public.v1_process TO api_user;
GRANT SELECT ON wf_public.v1_request TO api_user;

-- Grant EXECUTE on the public functions to the api_user role  
GRANT EXECUTE ON FUNCTION wf_public.v1_get_request_activity_history(uuid, boolean) TO api_user;
GRANT EXECUTE ON FUNCTION wf_public.v1_get_request_actions(uuid) TO api_user;
```

This script does the following:

1. Creates a `wf_public` schema to house the public API objects.

2. Creates views in the public schema to expose selected columns from the `stack_wf_process` and `stack_wf_request` tables. The views are prefixed with `v1_` to indicate version 1.

3. Creates functions in the public schema to get request activity history and available actions. These wrap the existing private functions.

4. Grants SELECT permissions on the public views and EXECUTE permissions on the public functions to an `api_user` role. You'll need to create this role separately and assign it to the appropriate database users.

With this setup, you can make controlled changes in the `wf_private` schema without impacting consumers of the public API. When you want to release breaking changes, you can create a new version of the views/functions (e.g. `v2_`) in the public schema.

To use PostgREST, you can configure it to connect to your database and expose the `wf_public` schema. PostgREST will automatically create REST endpoints for the views and functions.

Let me know if you have any other questions!
